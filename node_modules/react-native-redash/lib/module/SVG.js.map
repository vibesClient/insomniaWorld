{"version":3,"sources":["SVG.ts"],"names":["Animated","parseSVG","absSVG","normalizeSVG","find","cubicBezier","cubicBezierLength","Value","lessOrEq","greaterOrEq","and","cond","interpolate","reConcat","concat","MX","MY","CX1","CY1","CX2","CY2","CX","CY","args","slice","parsePath","d","move","curves","parts","map","curve","index","prevCurve","p0","x","y","p1","p2","p3","length","segments","part","start","reduce","acc","p","end","totalLength","segment","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","getPointAtLength","path","notFound","i","t","inputRange","outputRange","animatedString","strings","arr","n","push","interpolatePath","value","config","paths","commands","_","mx","my","bInterpolatePath","path1","path2"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\nimport parseSVG from \"parse-svg-path\";\nimport absSVG from \"abs-svg-path\";\nimport normalizeSVG from \"normalize-svg-path\";\nimport { find } from \"./Arrays\";\n\nimport { cubicBezier } from \"./Math\";\nimport cubicBezierLength from \"./CubicBezierLength\";\n\nconst {\n  Value,\n  lessOrEq,\n  greaterOrEq,\n  and,\n  cond,\n  interpolate,\n  concat: reConcat\n} = Animated;\n\n// const COMMAND = 0;\nconst MX = 1;\nconst MY = 2;\nconst CX1 = 1;\nconst CY1 = 2;\nconst CX2 = 3;\nconst CY2 = 4;\nconst CX = 5;\nconst CY = 6;\n\ntype SVGMoveCommand = [\"M\", number, number];\ntype SVGCurveCommand = [\"C\", number, number, number, number, number, number];\ntype SVGNormalizedCommands = [SVGMoveCommand, ...SVGCurveCommand[]];\n\nconst concat = (\n  ...args: Array<Animated.Adaptable<string> | Animated.Adaptable<number>>\n): Animated.Node<string> =>\n  reConcat(args[0] as any, args[1] as any, ...(args.slice(2) as any[]));\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\ninterface BezierCubicCurve {\n  length: number;\n  p0: Point;\n  p1: Point;\n  p2: Point;\n  p3: Point;\n}\n\nexport interface ReanimatedPath {\n  totalLength: number;\n  segments: { start: number; end: number }[];\n  length: number[];\n  start: number[];\n  end: number[];\n  p0x: number[];\n  p0y: number[];\n  p1x: number[];\n  p1y: number[];\n  p2x: number[];\n  p2y: number[];\n  p3x: number[];\n  p3y: number[];\n}\n\nexport const parsePath = (d: string): ReanimatedPath => {\n  const [move, ...curves]: SVGNormalizedCommands = normalizeSVG(\n    absSVG(parseSVG(d))\n  );\n  const parts: BezierCubicCurve[] = curves.map((curve, index) => {\n    const prevCurve = curves[index - 1];\n    const p0 =\n      index === 0\n        ? { x: move[MX], y: move[MY] }\n        : { x: prevCurve[CX], y: prevCurve[CY] };\n    const p1 = { x: curve[CX1], y: curve[CY1] };\n    const p2 = { x: curve[CX2], y: curve[CY2] };\n    const p3 = { x: curve[CX], y: curve[CY] };\n    const length = cubicBezierLength(p0, p1, p2, p3);\n    return {\n      p0,\n      p1,\n      p2,\n      p3,\n      length\n    };\n  });\n  const segments = parts.map((part, index) => {\n    const start = parts.slice(0, index).reduce((acc, p) => acc + p.length, 0);\n    const end = start + part.length;\n    return {\n      start,\n      end\n    };\n  });\n  return {\n    segments,\n    totalLength: parts.reduce((acc, part) => acc + part.length, 0),\n    length: parts.map(part => part.length),\n    start: segments.map(segment => segment.start),\n    end: segments.map(segment => segment.end),\n    p0x: parts.map(part => part.p0.x),\n    p0y: parts.map(part => part.p0.y),\n    p1x: parts.map(part => part.p1.x),\n    p1y: parts.map(part => part.p1.y),\n    p2x: parts.map(part => part.p2.x),\n    p2y: parts.map(part => part.p2.y),\n    p3x: parts.map(part => part.p3.x),\n    p3y: parts.map(part => part.p3.y)\n  };\n};\n\nexport const getPointAtLength = (\n  path: ReanimatedPath,\n  length: Animated.Node<number>\n): { x: Animated.Node<number>; y: Animated.Node<number> } => {\n  const notFound: Animated.Node<number> = new Value(-1);\n  const index = path.segments.reduce(\n    (acc, p, i) =>\n      cond(and(greaterOrEq(length, p.start), lessOrEq(length, p.end)), i, acc),\n    notFound\n  );\n  const start = find(path.start, index);\n  const end = find(path.end, index);\n\n  const p0x = find(path.p0x, index);\n  const p1x = find(path.p1x, index);\n  const p2x = find(path.p2x, index);\n  const p3x = find(path.p3x, index);\n\n  const p0y = find(path.p0y, index);\n  const p1y = find(path.p1y, index);\n  const p2y = find(path.p2y, index);\n  const p3y = find(path.p3y, index);\n  const t = interpolate(length, {\n    inputRange: [start, end],\n    outputRange: [0, 1]\n  });\n  return {\n    x: cubicBezier(t, p0x, p1x, p2x, p3x),\n    y: cubicBezier(t, p0y, p1y, p2y, p3y)\n  };\n};\n\nconst animatedString = (\n  strings: ReadonlyArray<Animated.Adaptable<string>>,\n  ...values: Animated.Adaptable<string | number>[]\n): Animated.Node<string> => {\n  const arr = [];\n  const n = values.length;\n  for (let i = 0; i < n; i += 1) {\n    arr.push(strings[i], values[i]);\n  }\n  const end = strings[n];\n  if (end) {\n    arr.push(end);\n  }\n  return concat(...(arr as any));\n};\n\ninterface PathInterpolationConfig {\n  inputRange: ReadonlyArray<Animated.Adaptable<number>>;\n  outputRange: ReadonlyArray<ReanimatedPath | string>;\n}\n\nexport const interpolatePath = (\n  value: Animated.Adaptable<number>,\n  config: PathInterpolationConfig\n): Animated.Node<string> => {\n  const { inputRange } = config;\n  const paths = config.outputRange.map(path =>\n    typeof path === \"string\" ? parsePath(path) : path\n  );\n  const path = paths[0];\n  const commands = path.segments.map((_, index) => {\n    const mx = interpolate(value, {\n      inputRange,\n      outputRange: paths.map(p => p.p0x[index])\n    });\n    const my = interpolate(value, {\n      inputRange,\n      outputRange: paths.map(p => p.p0y[index])\n    });\n\n    const p1x = interpolate(value, {\n      inputRange,\n      outputRange: paths.map(p => p.p1x[index])\n    });\n    const p1y = interpolate(value, {\n      inputRange,\n      outputRange: paths.map(p => p.p1y[index])\n    });\n\n    const p2x = interpolate(value, {\n      inputRange,\n      outputRange: paths.map(p => p.p2x[index])\n    });\n    const p2y = interpolate(value, {\n      inputRange,\n      outputRange: paths.map(p => p.p2y[index])\n    });\n\n    const p3x = interpolate(value, {\n      inputRange,\n      outputRange: paths.map(p => p.p3x[index])\n    });\n    const p3y = interpolate(value, {\n      inputRange,\n      outputRange: paths.map(p => p.p3y[index])\n    });\n\n    return animatedString`${\n      index === 0 ? animatedString`M${mx},${my} ` : \"\"\n    }C${p1x},${p1y} ${p2x},${p2y} ${p3x},${p3y}`;\n  });\n  return concat(...commands);\n};\n\nexport const bInterpolatePath = (\n  value: Animated.Value<number>,\n  path1: ReanimatedPath,\n  path2: ReanimatedPath\n): Animated.Node<string> =>\n  interpolatePath(value, {\n    inputRange: [0, 1],\n    outputRange: [path1, path2]\n  });\n"]}