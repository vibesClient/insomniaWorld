{"version":3,"sources":["Math.ts"],"names":["Animated","cond","add","multiply","lessThan","abs","divide","sub","min2","min","max2","max","greaterOrEq","pow","args","reduce","acc","arg","clamp","value","lowerBound","upperBound","toRad","deg","Math","PI","toDeg","rad","atan","atan2","y","x","coeff1","coeff2","absY","angle","cubicBezier","t","p0","p1","p2","p3","term","a","b","c","d"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  divide,\n  sub,\n  min: min2,\n  max: max2,\n  greaterOrEq,\n  pow\n} = Animated;\n\nexport const min = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => min2(acc, arg));\n\nexport const max = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => max2(acc, arg));\n\nexport const clamp = (\n  value: Animated.Node<number>,\n  lowerBound: number,\n  upperBound: number\n): Animated.Node<number> => min2(max2(lowerBound, value), upperBound);\n\nexport const toRad = (deg: Animated.Adaptable<number>): Animated.Node<number> =>\n  multiply(deg, Math.PI / 180);\n\nexport const toDeg = (rad: Animated.Adaptable<number>): Animated.Node<number> =>\n  multiply(rad, 180 / Math.PI);\n\nexport const atan = (rad: Animated.Adaptable<number>): Animated.Node<number> =>\n  sub(\n    multiply(Math.PI / 4, rad),\n    multiply(\n      multiply(rad, sub(abs(rad), 1)),\n      add(0.2447, multiply(0.0663, abs(rad)))\n    )\n  );\n\nexport const atan2 = (\n  y: Animated.Adaptable<number>,\n  x: Animated.Adaptable<number>\n): Animated.Node<number> => {\n  const coeff1 = Math.PI / 4;\n  const coeff2 = 3 * coeff1;\n  const absY = abs(y);\n  const angle = cond(\n    greaterOrEq(x, 0),\n    [sub(coeff1, multiply(coeff1, divide(sub(x, absY), add(x, absY))))],\n    [sub(coeff2, multiply(coeff1, divide(add(x, absY), sub(absY, x))))]\n  );\n  return cond(lessThan(y, 0), multiply(angle, -1), angle);\n};\n\nexport const cubicBezier = (\n  t: Animated.Node<number>,\n  p0: Animated.Node<number>,\n  p1: Animated.Node<number>,\n  p2: Animated.Node<number>,\n  p3: Animated.Node<number>\n): Animated.Node<number> => {\n  const term = sub(1, t);\n  const a = multiply(1, pow(term, 3), pow(t, 0), p0);\n  const b = multiply(3, pow(term, 2), pow(t, 1), p1);\n  const c = multiply(3, pow(term, 1), pow(t, 2), p2);\n  const d = multiply(1, pow(term, 0), pow(t, 3), p3);\n  return add(a, b, c, d);\n};\n"]}