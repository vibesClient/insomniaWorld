{"version":3,"sources":["Colors.ts"],"names":["Animated","cond","add","multiply","lessThan","abs","modulo","round","interpolate","divide","sub","color","Extrapolate","match","condsAndResPairs","offset","length","undefined","colorHSV","h","s","v","c","hh","x","m","colorRGB","r","g","b","rgbToHsv","ma","Math","max","mi","min","d","interpolateColorsHSV","animationValue","inputRange","colors","colorsAsHSV","map","outputRange","extrapolate","CLAMP","interpolateColorsRGB","interpolateColor","value","config","colorSpace","bInterpolateColor","color1","color2"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,yBAArB,C,GAGEC,CAAAA,I,CAYED,Q,CAZFC,I,CACAC,G,CAWEF,Q,CAXFE,G,CACAC,Q,CAUEH,Q,CAVFG,Q,CACAC,Q,CASEJ,Q,CATFI,Q,CACAC,G,CAQEL,Q,CARFK,G,CACAC,M,CAOEN,Q,CAPFM,M,CACAC,K,CAMEP,Q,CANFO,K,CACAC,W,CAKER,Q,CALFQ,W,CACAC,M,CAIET,Q,CAJFS,M,CACAC,G,CAGEV,Q,CAHFU,G,CACAC,K,CAEEX,Q,CAFFW,K,CACAC,W,CACEZ,Q,CADFY,W,CASF,QAASC,CAAAA,KAAT,CACEC,gBADF,CAGO,IADLC,CAAAA,MACK,2DADI,CACJ,CACL,GAAID,gBAAgB,CAACE,MAAjB,CAA0BD,MAA1B,GAAqC,CAAzC,CAA4C,CAC1C,MAAOD,CAAAA,gBAAgB,CAACC,MAAD,CAAvB,CACD,CACD,GAAID,gBAAgB,CAACE,MAAjB,CAA0BD,MAA1B,GAAqC,CAAzC,CAA4C,CAC1C,MAAOE,CAAAA,SAAP,CACD,CACD,MAAOhB,CAAAA,IAAI,CACTa,gBAAgB,CAACC,MAAD,CADP,CAETD,gBAAgB,CAACC,MAAM,CAAG,CAAV,CAFP,CAGTF,KAAK,CAACC,gBAAD,CAAmBC,MAAM,CAAG,CAA5B,CAHI,CAAX,CAKD,CAED,QAASG,CAAAA,QAAT,CACEC,CADF,CAEEC,CAFF,CAGEC,CAHF,CAIE,CAGA,GAAMC,CAAAA,CAAC,CAAGnB,QAAQ,CAACkB,CAAD,CAAID,CAAJ,CAAlB,CACA,GAAMG,CAAAA,EAAE,CAAGd,MAAM,CAACU,CAAD,CAAI,EAAJ,CAAjB,CACA,GAAMK,CAAAA,CAAC,CAAGrB,QAAQ,CAACmB,CAAD,CAAIZ,GAAG,CAAC,CAAD,CAAIL,GAAG,CAACK,GAAG,CAACJ,MAAM,CAACiB,EAAD,CAAK,CAAL,CAAP,CAAgB,CAAhB,CAAJ,CAAP,CAAP,CAAlB,CAEA,GAAME,CAAAA,CAAC,CAAGf,GAAG,CAACW,CAAD,CAAIC,CAAJ,CAAb,CAEA,GAAMI,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CACfC,CADe,CAEfC,CAFe,CAGfC,CAHe,QAKflB,CAAAA,KAAK,CACHJ,KAAK,CAACJ,QAAQ,CAAC,GAAD,CAAMD,GAAG,CAACyB,CAAD,CAAIF,CAAJ,CAAT,CAAT,CADF,CAEHlB,KAAK,CAACJ,QAAQ,CAAC,GAAD,CAAMD,GAAG,CAAC0B,CAAD,CAAIH,CAAJ,CAAT,CAAT,CAFF,CAGHlB,KAAK,CAACJ,QAAQ,CAAC,GAAD,CAAMD,GAAG,CAAC2B,CAAD,CAAIJ,CAAJ,CAAT,CAAT,CAHF,CALU,EAAjB,CAWA,MAAOZ,CAAAA,KAAK,CAAC,CACXT,QAAQ,CAACe,CAAD,CAAI,EAAJ,CADG,CAEXO,QAAQ,CAACJ,CAAD,CAAIE,CAAJ,CAAO,CAAP,CAFG,CAGXpB,QAAQ,CAACe,CAAD,CAAI,GAAJ,CAHG,CAIXO,QAAQ,CAACF,CAAD,CAAIF,CAAJ,CAAO,CAAP,CAJG,CAKXlB,QAAQ,CAACe,CAAD,CAAI,GAAJ,CALG,CAMXO,QAAQ,CAAC,CAAD,CAAIJ,CAAJ,CAAOE,CAAP,CANG,CAOXpB,QAAQ,CAACe,CAAD,CAAI,GAAJ,CAPG,CAQXO,QAAQ,CAAC,CAAD,CAAIF,CAAJ,CAAOF,CAAP,CARG,CASXlB,QAAQ,CAACe,CAAD,CAAI,GAAJ,CATG,CAUXO,QAAQ,CAACF,CAAD,CAAI,CAAJ,CAAOF,CAAP,CAVG,CAWXI,QAAQ,CAACJ,CAAD,CAAI,CAAJ,CAAOE,CAAP,CAXG,CAAD,CAAZ,CAaD,CAED,GAAMM,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACR,CAAD,CAAiB,CAChC,GAAMK,CAAAA,CAAC,CAAGL,CAAC,CAACK,CAAF,CAAM,GAAhB,CACA,GAAMC,CAAAA,CAAC,CAAGN,CAAC,CAACM,CAAF,CAAM,GAAhB,CACA,GAAMC,CAAAA,CAAC,CAAGP,CAAC,CAACO,CAAF,CAAM,GAAhB,CAEA,GAAME,CAAAA,EAAE,CAAGC,IAAI,CAACC,GAAL,CAASN,CAAT,CAAYC,CAAZ,CAAeC,CAAf,CAAX,CACA,GAAMK,CAAAA,EAAE,CAAGF,IAAI,CAACG,GAAL,CAASR,CAAT,CAAYC,CAAZ,CAAeC,CAAf,CAAX,CACA,GAAIV,CAAAA,CAAS,CAAG,CAAhB,CACA,GAAME,CAAAA,CAAC,CAAGU,EAAV,CAEA,GAAMK,CAAAA,CAAC,CAAGL,EAAE,CAAGG,EAAf,CACA,GAAMd,CAAAA,CAAC,CAAGW,EAAE,GAAK,CAAP,CAAW,CAAX,CAAeK,CAAC,CAAGL,EAA7B,CACA,GAAIA,EAAE,GAAKG,EAAX,CAAe,CACbf,CAAC,CAAG,CAAJ,CACD,CAFD,IAEO,CACL,OAAQY,EAAR,EACE,IAAKJ,CAAAA,CAAL,CACER,CAAC,CAAG,CAACS,CAAC,CAAGC,CAAL,EAAUO,CAAV,EAAeR,CAAC,CAAGC,CAAJ,CAAQ,CAAR,CAAY,CAA3B,CAAJ,CACA,MACF,IAAKD,CAAAA,CAAL,CACET,CAAC,CAAG,CAACU,CAAC,CAAGF,CAAL,EAAUS,CAAV,CAAc,CAAlB,CACA,MACF,IAAKP,CAAAA,CAAL,CACEV,CAAC,CAAG,CAACQ,CAAC,CAAGC,CAAL,EAAUQ,CAAV,CAAc,CAAlB,CACA,MACF,QAVF,CAYAjB,CAAC,EAAI,CAAL,CACD,CACD,MAAO,CAAEA,CAAC,CAAEA,CAAC,CAAG,GAAT,CAAcC,CAAC,CAADA,CAAd,CAAiBC,CAAC,CAADA,CAAjB,CAAP,CACD,CA9BD,CAgCA,GAAMgB,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAC3BC,cAD2B,CAE3BC,UAF2B,CAG3BC,MAH2B,CAIxB,CACH,GAAMC,CAAAA,WAAW,CAAGD,MAAM,CAACE,GAAP,CAAW,SAAApB,CAAC,QAAIQ,CAAAA,QAAQ,CAACR,CAAD,CAAZ,EAAZ,CAApB,CACA,GAAMH,CAAAA,CAAC,CAAGX,WAAW,CAAC8B,cAAD,CAAiB,CACpCC,UAAU,CAAVA,UADoC,CAEpCI,WAAW,CAAEF,WAAW,CAACC,GAAZ,CAAgB,SAAApB,CAAC,QAAIA,CAAAA,CAAC,CAACH,CAAN,EAAjB,CAFuB,CAGpCyB,WAAW,CAAEhC,WAAW,CAACiC,KAHW,CAAjB,CAArB,CAKA,GAAMzB,CAAAA,CAAC,CAAGZ,WAAW,CAAC8B,cAAD,CAAiB,CACpCC,UAAU,CAAVA,UADoC,CAEpCI,WAAW,CAAEF,WAAW,CAACC,GAAZ,CAAgB,SAAApB,CAAC,QAAIA,CAAAA,CAAC,CAACF,CAAN,EAAjB,CAFuB,CAGpCwB,WAAW,CAAEhC,WAAW,CAACiC,KAHW,CAAjB,CAArB,CAKA,GAAMxB,CAAAA,CAAC,CAAGb,WAAW,CAAC8B,cAAD,CAAiB,CACpCC,UAAU,CAAVA,UADoC,CAEpCI,WAAW,CAAEF,WAAW,CAACC,GAAZ,CAAgB,SAAApB,CAAC,QAAIA,CAAAA,CAAC,CAACD,CAAN,EAAjB,CAFuB,CAGpCuB,WAAW,CAAEhC,WAAW,CAACiC,KAHW,CAAjB,CAArB,CAKA,MAAO3B,CAAAA,QAAQ,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAf,CACD,CAtBD,CAwBA,GAAMyB,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAC3BR,cAD2B,CAE3BC,UAF2B,CAG3BC,MAH2B,CAIxB,CACH,GAAMb,CAAAA,CAAC,CAAGpB,KAAK,CACbC,WAAW,CAAC8B,cAAD,CAAiB,CAC1BC,UAAU,CAAVA,UAD0B,CAE1BI,WAAW,CAAEH,MAAM,CAACE,GAAP,CAAW,SAAApB,CAAC,QAAIA,CAAAA,CAAC,CAACK,CAAN,EAAZ,CAFa,CAG1BiB,WAAW,CAAEhC,WAAW,CAACiC,KAHC,CAAjB,CADE,CAAf,CAOA,GAAMjB,CAAAA,CAAC,CAAGrB,KAAK,CACbC,WAAW,CAAC8B,cAAD,CAAiB,CAC1BC,UAAU,CAAVA,UAD0B,CAE1BI,WAAW,CAAEH,MAAM,CAACE,GAAP,CAAW,SAAApB,CAAC,QAAIA,CAAAA,CAAC,CAACM,CAAN,EAAZ,CAFa,CAG1BgB,WAAW,CAAEhC,WAAW,CAACiC,KAHC,CAAjB,CADE,CAAf,CAOA,GAAMhB,CAAAA,CAAC,CAAGtB,KAAK,CACbC,WAAW,CAAC8B,cAAD,CAAiB,CAC1BC,UAAU,CAAVA,UAD0B,CAE1BI,WAAW,CAAEH,MAAM,CAACE,GAAP,CAAW,SAAApB,CAAC,QAAIA,CAAAA,CAAC,CAACO,CAAN,EAAZ,CAFa,CAG1Be,WAAW,CAAEhC,WAAW,CAACiC,KAHC,CAAjB,CADE,CAAf,CAOA,MAAOlC,CAAAA,KAAK,CAACgB,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAZ,CACD,CA3BD,CAkCA,MAAO,IAAMkB,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAC9BC,KAD8B,CAE9BC,MAF8B,CAI3B,IADHC,CAAAA,UACG,2DADyB,KACzB,IACKX,CAAAA,UADL,CACiCU,MADjC,CACKV,UADL,CACiBI,WADjB,CACiCM,MADjC,CACiBN,WADjB,CAEH,GAAIO,UAAU,GAAK,KAAnB,CACE,MAAOb,CAAAA,oBAAoB,CAACW,KAAD,CAAQT,UAAR,CAAoBI,WAApB,CAA3B,CACF,MAAOG,CAAAA,oBAAoB,CAACE,KAAD,CAAQT,UAAR,CAAoBI,WAApB,CAA3B,CACD,CATM,CAWP,MAAO,IAAMQ,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAC/BH,KAD+B,CAE/BI,MAF+B,CAG/BC,MAH+B,KAI/BH,CAAAA,UAJ+B,2DAIH,KAJG,OAM/BH,CAAAA,gBAAgB,CACdC,KADc,CAEd,CACET,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADd,CAEEI,WAAW,CAAE,CAACS,MAAD,CAASC,MAAT,CAFf,CAFc,CAMdH,UANc,CANe,EAA1B","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  modulo,\n  round,\n  interpolate,\n  divide,\n  sub,\n  color,\n  Extrapolate\n} = Animated;\n\ninterface RGBColor {\n  r: number;\n  g: number;\n  b: number;\n}\n\nfunction match(\n  condsAndResPairs: Animated.Adaptable<number>[],\n  offset = 0\n): any {\n  if (condsAndResPairs.length - offset === 1) {\n    return condsAndResPairs[offset];\n  }\n  if (condsAndResPairs.length - offset === 0) {\n    return undefined;\n  }\n  return cond(\n    condsAndResPairs[offset],\n    condsAndResPairs[offset + 1],\n    match(condsAndResPairs, offset + 2)\n  );\n}\n\nfunction colorHSV(\n  h: Animated.Adaptable<number> /* 0 - 360 */,\n  s: Animated.Adaptable<number> /* 0 - 1 */,\n  v: Animated.Adaptable<number> /* 0 - 1 */\n) {\n  // Converts color from HSV format into RGB\n  // Formula explained here: https://www.rapidtables.com/convert/color/hsv-to-rgb.html\n  const c = multiply(v, s);\n  const hh = divide(h, 60);\n  const x = multiply(c, sub(1, abs(sub(modulo(hh, 2), 1))));\n\n  const m = sub(v, c);\n\n  const colorRGB = (\n    r: Animated.Adaptable<number>,\n    g: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>\n  ) =>\n    color(\n      round(multiply(255, add(r, m))),\n      round(multiply(255, add(g, m))),\n      round(multiply(255, add(b, m)))\n    );\n\n  return match([\n    lessThan(h, 60),\n    colorRGB(c, x, 0),\n    lessThan(h, 120),\n    colorRGB(x, c, 0),\n    lessThan(h, 180),\n    colorRGB(0, c, x),\n    lessThan(h, 240),\n    colorRGB(0, x, c),\n    lessThan(h, 300),\n    colorRGB(x, 0, c),\n    colorRGB(c, 0, x) /* else */\n  ]);\n}\n\nconst rgbToHsv = (c: RGBColor) => {\n  const r = c.r / 255;\n  const g = c.g / 255;\n  const b = c.b / 255;\n\n  const ma = Math.max(r, g, b);\n  const mi = Math.min(r, g, b);\n  let h: number = 0;\n  const v = ma;\n\n  const d = ma - mi;\n  const s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0; // achromatic\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default: // do nothing\n    }\n    h /= 6;\n  }\n  return { h: h * 360, s, v };\n};\n\nconst interpolateColorsHSV = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: number[],\n  colors: RGBColor[]\n) => {\n  const colorsAsHSV = colors.map(c => rgbToHsv(c));\n  const h = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.h),\n    extrapolate: Extrapolate.CLAMP\n  });\n  const s = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.s),\n    extrapolate: Extrapolate.CLAMP\n  });\n  const v = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.v),\n    extrapolate: Extrapolate.CLAMP\n  });\n  return colorHSV(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: number[],\n  colors: RGBColor[]\n) => {\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(c => c.r),\n      extrapolate: Extrapolate.CLAMP\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(c => c.g),\n      extrapolate: Extrapolate.CLAMP\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(c => c.b),\n      extrapolate: Extrapolate.CLAMP\n    })\n  );\n  return color(r, g, b);\n};\n\ninterface ColorInterpolationConfig {\n  inputRange: number[];\n  outputRange: RGBColor[];\n}\n\nexport const interpolateColor = (\n  value: Animated.Adaptable<number>,\n  config: ColorInterpolationConfig,\n  colorSpace: \"hsv\" | \"rgb\" = \"hsv\"\n) => {\n  const { inputRange, outputRange } = config;\n  if (colorSpace === \"hsv\")\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  return interpolateColorsRGB(value, inputRange, outputRange);\n};\n\nexport const bInterpolateColor = (\n  value: Animated.Adaptable<number>,\n  color1: RGBColor,\n  color2: RGBColor,\n  colorSpace: \"hsv\" | \"rgb\" = \"hsv\"\n) =>\n  interpolateColor(\n    value,\n    {\n      inputRange: [0, 1],\n      outputRange: [color1, color2]\n    },\n    colorSpace\n  );\n"]}